var username = req.getParameter(SAMLSSOProviderConstants.USERNAME);
var password = req.getParameter(SAMLSSOProviderConstants.PASSWORD);

var log = new Log();

var req = request;
var resp = response;

        var ssoTokenID = session.getId();
        Cookie tokenCookie = req.getCookie(SAMLSSOProviderConstants.SSO_TOKEN_ID);
        if (tokenCookie != null) {
            ssoTokenID = tokenCookie.getValue();
        }
        // Handle the request.
        try {
else if (username == null && password == null) { 
				// First request without credentials. Should redirect to login page
				var samlRequest = req.getParameter("SAMLRequest");
				var authMode = SAMLSSOProviderConstants.AuthnModes.USERNAME_PASSWORD;
	
				// Get the relay state. If it is not there, redirect users to
				// the error page.
				var relayState = req.getParameter(SAMLSSOProviderConstants.RELAY_STATE);
				if (relayState == null) {
					log.warn("RelayState is not present in the request.");
				}

				if (samlRequest != null) { // this is a login request
					handleSAMLRequest(req, resp, ssoTokenID, samlRequest, relayState, authMode);
				} else { // Non-SAML request are assumed to be logout requests
					handleLogout(req, resp);
				}
			} else { // Request coming from login page with username and
						// password
				handleRequestFromLoginPage(req, resp, ssoTokenID);
			}
        } catch (IdentityException e) { // in case of an error, redirect them to notifications page with an error msg.
            log.error("Error when processing the authentication request!", e);
            req.setAttribute(SAMLSSOProviderConstants.STATUS,
                             "Error when processing the authentication request!");
            req.setAttribute(SAMLSSOProviderConstants.STATUS_MSG,
                             "Please try login again.");
            RequestDispatcher reqDispatcher = getServletContext().getRequestDispatcher(
                    "/carbon/sso-saml/notification_ajaxprocessor.jsp");
            reqDispatcher.forward(req, resp);
        }
    }
