<%
var log = new Log();
var data = request.getContent();
var action = request.getParameter('action');

response.addHeader("Content-Type", "application/json");


(function () {
    if (action == "queryDb") {

        //TODO : refactor to avoid hard coding
        var db = new Database(data.conSettings['Connection URL'], data.conSettings.Username, data.conSettings.Password);
        var result = db.query(data.queryData['SQL Statement'] + " limit 1");
        db.close();
        var names = [];

        result.forEach(function (sp) {
            for (var o in sp) {
                names.push(o); // the property name
            }
        });
        print(names);
        return;

    } else if (action == "createJag") {

        /** @type {{ createDir:function, loadFile:function }} */
        var site = require('/modules/site.js');

        var result = {};
        try {
            var uuid = require('uuid');
            var resource_id = uuid.generate();

            var folderName = data.mappingData[0][data.dataColumns[0]] + "VS" + data.mappingData[0][data.dataColumns[1]];
            var path = "/gadgetDataApis/" + folderName + "_" + resource_id + "/";

            var pathToDataJag = path + folderName + ".jag";

            var parts = pathToDataJag.split('/');
            var dirPath = '';
            for (var i = 0; i < parts.length - 1; i++) {
                var part = parts[i];
                dirPath = dirPath + '/' + part;
                try {
                    site.createDir(data.appName, dirPath);
                } catch (e) {
                    // ASSUME: Error is due to dir already existing, thus ignore
                }
            }

            var pathToOptions = path + 'chart-options.json';
            var file = site.loadFile('portal', data.chartOptions);
            file.open("r");
            site.createFile(data.appName, pathToOptions, file.getStream());
            file.close();

            var jagFileData = '\<\%\n' +

                    'function getDBData() {\n' +
                    '   var dataColumns = JSON.parse(\'' + stringify(data.dataColumns) + '\');\n' +
                    '   var mapping = JSON.parse(\'' + stringify(data.mappingData) + '\');\n' +
                    '   var result = [];\n' +
                    '   var ticks = [];\n' +
                    '   var tickTmp = [];\n' +

                    '   var output = {};\n' +

                    '   var db = new Database("' + data.conSettings["Connection URL"] + '", "' + data.conSettings.Username + '", "' + data.conSettings.Password + '");\n' +
                    '   var dbResult = db.query("' + data.queryData["SQL Statement"] + '");\n' +
                    '   db.close();\n' +

                    '   for (var i = 0,k = 0; i < dbResult.length; i++) {\n' +
                    '       for (var j = 0; j < mapping.length; j++) {\n' +
                    '           if(!result[j]){\n' +
                    '              result[j] = [];\n' +
                    '           }\n' +
                    '           if(tickTmp[dbResult[i][mapping[j][dataColumns[0]]]]){\n' +
                    '               var keyVal = tickTmp[dbResult[i][mapping[j][dataColumns[0]]]];\n' +
                    '               if(dataColumns[2]){ \n' +
                    '                  result[j].push([keyVal, dbResult[i][mapping[j][dataColumns[1]]], dbResult[i][mapping[j][dataColumns[2]]] ]);\n' +
                    '               } \n' +
                    '               else{ \n' +
                    '                   result[j].push([keyVal, dbResult[i][mapping[j][dataColumns[1]]]]);\n' +
                    '               } \n' +
                    '           } else {\n' +
                    '               tickTmp[dbResult[i][mapping[j][dataColumns[0]]]] = k+1;\n' +
                    '               ticks.push([k+1, dbResult[i][mapping[j][dataColumns[0]]]]);\n' +
                    '               if(dataColumns[2]){ \n' +
                    '                   result[j].push([k+1, dbResult[i][mapping[j][dataColumns[1]]], dbResult[i][mapping[j][dataColumns[2]]] ]);\n' +
                    '               } \n' +
                    '               else { \n' +
                    '                   result[j].push([k+1, dbResult[i][mapping[j][dataColumns[1]]]]);\n' +
                    '               } \n' +
                    '               k++;\n' +
                    '           }\n' +

                    '       }\n' +
                    '   }\n' +


                    '   for (var j = 0; j < mapping.length; j++) {\n' +
                    '       var tmpObj = {};\n' +
                    '       tmpObj["label"] = mapping[j]["Series Label"];\n' +
                    '       tmpObj["data"] = result[j];\n' +
                    '       output["series"+j] = tmpObj;\n' +
                    '   }\n' +

                    ' var chartOptions = require("chart-options.json")\n' +
                    ' chartOptions["xaxis"]["axisLabel"]= "' + data.dataLabels["X-Axis Label"] + '";\n' +
                    ' chartOptions["yaxis"]["axisLabel"]= "' + data.dataLabels["Y-Axis Label"] + '";\n' +
                    ' chartOptions["xaxis"]["ticks"]= ticks;\n' +
                    ' return {0: output, 1: chartOptions};\n' +
                    '}\n' +
                    'print(getDBData());\n' +
                    '\%\>';


            site.createFile(data.appName, pathToDataJag, jagFileData);
            result.jagPath = "/" + data.appName + pathToDataJag + "";
            log.info("File created successfully at " + result.jagPath);

            print(result);


        } catch (error) {
            response.sendError(404, 'Request processing error');
        } finally {

        }

        return;
    }

    response.sendError(404, 'Request action not found');


})();
%>