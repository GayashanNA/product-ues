<%
var log = new Log();
var data = request.getContent();
var action = request.getParameter('action');
var mode = request.getParameter('mode');

response.addHeader("Content-Type", "application/json");


(function () {
    if (action == "queryDb") {

        //TODO : refactor to avoid hard coding
        var db = new Database(data.conSettings['Connection URL'], data.conSettings.Username, data.conSettings.Password);
        var result = db.query(data.queryData['SQL Statement'] + " limit 1");
        db.close();
        var names = [];

        result.forEach(function (sp) {
            for (var o in sp) {
                names.push(o); // the property name
            }
        });
        print(names);
        return;
        
 	} else if (action == "queryDbAll") {

        //TODO : refactor to avoid hard coding
        
        try{
        var db = new Database(data.conSettings['Connection URL'], data.conSettings.Username, data.conSettings.Password);
        var result = db.query(data.queryData['SQL Statement'] + " limit 50");
        db.close();
       } catch(e){
       	print('Error while retrieving data.');
       	return;
       }
        
        var output = {};
        
        output.tableHeaders = Object.keys(result[0]);
        output.tableRows = [];

		for(var i in result){
			_obj = [];
			for(var k in result[i]){
				_obj.push(result[i][k])
			}
			 output.tableRows.push(_obj);
		}
       
        print(output);
        return;

    } else if (action == "createJag") {

        /** @type {{ createDir:function, loadFile:function }} */
        var site = require('/modules/site.js');

        var result = {};
        try {
            var uuid = require('uuid');
            var resource_id = uuid.generate();

            var folderName = data.mappingData[0][data.dataColumns[0]] + "VS" + data.mappingData[0][data.dataColumns[1]];
            if(mode == 'preview'){
            	 var path =  "/gadgetDataApis/";
            	 var pathToDataJag = path + "gadgetPreviewTemp.jag";
            } else {
            	var path = "/gadgetDataApis/" + folderName + "_" + resource_id + "/";
            	var pathToDataJag = path + folderName + ".jag";
            }

            var parts = pathToDataJag.split('/');
            var dirPath = '';
            for (var i = 0; i < parts.length - 1; i++) {
                var part = parts[i];
                dirPath = dirPath + '/' + part;
                try {
                    site.createDir(data.appName, dirPath);
                } catch (e) {
                    // ASSUME: Error is due to dir already existing, thus ignore
                }
            }

            var pathToOptions = path + 'chart-options.json';
            var file = site.loadFile('portal', data.chartOptions);
            file.open("r");
            site.createFile(data.appName, pathToOptions, file.getStream());
            file.close();

            var jagFileData = '\<\%\n' +

                    'function getDBData() {\n' +
                    '   var dataColumns = JSON.parse(\'' + stringify(data.dataColumns) + '\');\n' +
                    '   var mapping = JSON.parse(\'' + stringify(data.mappingData) + '\');\n' +
                    '   var type = JSON.parse(\'' + stringify(data.chartType) + '\');\n' +

                    '   var db = new Database("' + data.conSettings["Connection URL"] + '", "' + data.conSettings.Username + '", "' + data.conSettings.Password + '");\n' +
                    '   var dbResult = db.query("' + data.queryData["SQL Statement"] + '");\n' +
                    '   db.close();\n' +

                    '  var result = []; \n' +
                    '  var ticks = [];  \n' +
                    '  var tickTmp = []; \n' +
                    '  var output = {};  \n' +

                    '  var chartOptions = require("chart-options.json")\n' +

                    '  switch (type) { \n' +
                    '        case "Horizontal Bar Chart": \n' +

                    '            for (var i = 0, k = 0; i < dbResult.length; i++) {  \n' +
                    '                for (var j = 0; j < mapping.length; j++) {  \n' +
                    '                    if (!result[j]) {  \n' +
                    '                        result[j] = [];  \n' +
                    '                    }   \n' +

                    '                    if (tickTmp[dbResult[i][mapping[j][dataColumns[0]]]]) {   \n' +
                    '                        var keyVal = tickTmp[dbResult[i][mapping[j][dataColumns[0]]]];  \n' +
                    '                        result[j].push([dbResult[i][mapping[j][dataColumns[1]]], keyVal]);   \n' +

                    '                    } else {   \n' +
                    '                        tickTmp[dbResult[i][mapping[j][dataColumns[0]]]] = k + 1;   \n' +
                    '                        ticks.push([k + 1, dbResult[i][mapping[j][dataColumns[0]]]]);   \n' +
                    '                        result[j].push([dbResult[i][mapping[j][dataColumns[1]]], k + 1]);   \n' +
                    '                        k++;   \n' +
                    '                    }   \n' +

                    '                }    \n' +
                    '            }      \n' +
                     '           chartOptions["xaxis"]["axisLabel"]= "' + data.dataLabels["X-Axis Label"] + '";\n' +
                    '            chartOptions["yaxis"]["axisLabel"]= "' + data.dataLabels["Y-Axis Label"] + '";\n' +
                    '            chartOptions["yaxis"]["ticks"]= ticks;\n' +
                    '            break; \n' +
                    '        case "Bubble Chart":     \n' +
                    '            for (var i = 0, k = 0; i < dbResult.length; i++) {    \n' +
                    '                for (var j = 0; j < mapping.length; j++) {   \n' +
                    '                    if (!result[j]) {      \n' +
                    '                        result[j] = [];   \n' +
                    '                   }     \n' +
                    '                    if (tickTmp[dbResult[i][mapping[j][dataColumns[0]]]]) {    \n' +
                    '                        var keyVal = tickTmp[dbResult[i][mapping[j][dataColumns[0]]]];  \n' +
                    '                        result[j].push([keyVal, dbResult[i][mapping[j][dataColumns[1]]], dbResult[i][mapping[j][dataColumns[2]]] ]);  \n' +

                    '                    } else {   \n' +
                    '                        tickTmp[dbResult[i][mapping[j][dataColumns[0]]]] = k + 1;     \n' +
                    '                       ticks.push([k + 1, dbResult[i][mapping[j][dataColumns[0]]]]);   \n' +
                    '                        result[j].push([k + 1, dbResult[i][mapping[j][dataColumns[1]]], dbResult[i][mapping[j][dataColumns[2]]] ]);   \n' +
                    '                        k++;    \n' +
                    '                    }   \n' +

                    '                }   \n' +
                    '            }      \n' +
                    '            chartOptions["xaxis"]["ticks"]= ticks;\n' +
                     '           chartOptions["xaxis"]["axisLabel"]= "' + data.dataLabels["X-Axis Label"] + '";\n' +
                    '            chartOptions["yaxis"]["axisLabel"]= "' + data.dataLabels["Y-Axis Label"] + '";\n' +
                    '            break;    \n' +
                    '        case "Pie Chart":     \n' +
                    '              for (var i = 0; i < dbResult.length; i++) {    \n' +
                    '                   for (var j = 0; j < mapping.length; j++) {    \n' +
                    '                       if (!result[j]) {      \n' +
                    '                            result[j] = dbResult[i][mapping[j][dataColumns[0]]]    \n' +
                    '                       }     \n' +
                    '                   }    \n' +
                    '             }     \n' +
                    '            break;     \n' +
                    '        default:       \n' +
                    '            for (var i = 0, k = 0; i < dbResult.length; i++) {     \n' +
                    '                for (var j = 0; j < mapping.length; j++) {      \n' +
                    '                    if (!result[j]) {     \n' +
                    '                        result[j] = [];   \n' +
                    '                    }      \n' +
                    '                    if (tickTmp[dbResult[i][mapping[j][dataColumns[0]]]]) {     \n' +
                    '                        var keyVal = tickTmp[dbResult[i][mapping[j][dataColumns[0]]]];    \n' +
                    '                        result[j].push([keyVal, dbResult[i][mapping[j][dataColumns[1]]]]);     \n' +

                    '                    } else {      \n' +
                    '                        tickTmp[dbResult[i][mapping[j][dataColumns[0]]]] = k + 1;      \n' +
                    '                        ticks.push([k + 1, dbResult[i][mapping[j][dataColumns[0]]]]);       \n' +
                    '                        result[j].push([k + 1, dbResult[i][mapping[j][dataColumns[1]]]]);        \n' +
                    '                        k++;    \n' +
                    '                    }     \n' +

                    '                }        \n' +
                    '            }         \n' +
                    '            chartOptions["xaxis"]["ticks"]= ticks;\n' +
                     '           chartOptions["xaxis"]["axisLabel"]= "' + data.dataLabels["X-Axis Label"] + '";\n' +
                    '            chartOptions["yaxis"]["axisLabel"]= "' + data.dataLabels["Y-Axis Label"] + '";\n' +
                    '            break;     \n' +
                    '    }         \n' +


                    '    for (var j = 0; j < mapping.length; j++) {       \n' +
                    '        var tmpObj = {};          \n' +
                    '        tmpObj["label"] = mapping[j]["Series Label"];   \n' +
                    '        tmpObj["data"] = result[j];         \n' +
                    '        if(type == "Line Plus Bar Chart"){         \n' +
                    '           if(j==0){         \n' +
                    '               tmpObj["bars"] = { "show" : true};         \n' +
                    '           }         \n' +
                    '          else {        \n' +
                    '            tmpObj["lines"] = { "show" : true};        \n' +
                    '            tmpObj["points"] = { "show" : true};        \n' +
                    '           }         \n' +
                    '        }         \n' +
                    '        output["series" + j] = tmpObj;       \n' +
                    '    }       \n' +



                    ' return {0: output, 1: chartOptions};\n' +
                    '}\n' +
                    'print(getDBData());\n' +
                    '\%\>';


            site.createFile(data.appName, pathToDataJag, jagFileData);
            result.jagPath = "/" + data.appName + pathToDataJag + "";
            log.info("File created successfully at " + result.jagPath);

            print(result);


        } catch (error) {
            response.sendError(404, 'Request processing error');
        } finally {

        }

        return;
    }

    response.sendError(404, 'Request action not found');


})();
%>