var rxtPath = '/gadgets/';

var repoPath = '/gadgets';

var lastUpdated = 0;

var DEPLOYING_INTERVAL = 10000;

var caramel = require('caramel').caramel;
require('/app.js');

var portal = require('/portal.json');

var populate = function () {
    var i, name, length, gadgets, file, path,
        log = new Log(),
        repo = new File(repoPath),
        deployer = require('/modules/deployer.js'),
        context = caramel.configs().context,
        base = portal.server.http + context + rxtPath;
    if (repo.isDirectory()) {
        gadgets = repo.listFiles();
        length = gadgets.length;
        for (i = 0; i < length; i++) {
            name = gadgets[i].getName();
            file = new File(repoPath + '/' + name + '/' + name + '.xml');
            if (file.getLastModified() > lastUpdated) {
                log.info('Deploying Gadget : ' + name);
                path = base + name + '/';
                deployer.gadget({
                    name: name,
                    provider: portal.user.username,
                    version: '1.0.0',
                    url: path + name + '.xml',
                    thumbnail: path + 'thumbnail.jpg',
                    status: 'CREATED'
                });
            }
        }
    }
    lastUpdated = new Date().getTime();
};

var initialize = function () {
    var res, options, payload,
        ws = require('ws'),
        client = new ws.WSRequest(),
        host = portal.server.https.match(/.*:\/\/([^:\/]*)/)[1];

    options = {
        useSOAP: 1.2,
        useWSA: 1.0,
        action: 'urn:login'
    };

    payload =
        '<aut:login xmlns:aut="http://authentication.services.core.carbon.wso2.org">' +
            '<aut:username>' + portal.user.username + '</aut:username>' +
            '<aut:password>' + portal.user.password + '</aut:password>' +
            '<aut:remoteAddress>' + host + '</aut:remoteAddress>' +
            '</aut:login>';

    try {
        client.open(options, portal.server.https + '/services/AuthenticationAdmin', false);
        client.send(payload);
        res = client.responseXML;
        if (res.*::["return"].text() != 'true') {
            return false;
        }
        return client.getResponseHeader('Set-Cookie');
    } catch (e) {
        setTimeout(initialize, 2000);
    }
};

setTimeout(initialize, 2000);

populate();
setInterval(populate, DEPLOYING_INTERVAL);